{
  "address": "0x3A897E01612B4DdC64A3f0907a1013358BEabA63",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract NftBond",
          "name": "nft_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "router_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "usdc_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "weth_",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "AlreadyBorrowed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Borrow_DepositNotEnded",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Deposit_Ended",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Deposit_ExceededTotalAmount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Deposit_NotDivisibleByDecimals",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Deposit_NotStarted",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InitProject_InvalidTargetAmountInput",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InitProject_InvalidTimestampInput",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotExistingProject",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Repay_AlreadyDepositted",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Repay_DepositNotEnded",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Repay_NotEnoughAmountInput",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Withdraw_NotRepayedProject",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "Controller_NewProject",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "Repaid",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "projectId",
          "type": "uint256"
        }
      ],
      "name": "borrow",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimal",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "projectId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "targetAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "depositStartTs",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "depositEndTs",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "unit",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "uri",
          "type": "string"
        }
      ],
      "name": "initProject",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nft",
      "outputs": [
        {
          "internalType": "contract NftBond",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "projects",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "totalAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "currentAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "depositStartTs",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "depositEndTs",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "finalAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "projectId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "repay",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "router",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        }
      ],
      "name": "swapExactOutputSingle",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "usdc",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "weth",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "projectId",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x441e73cdb0647cd3bf0cd8598b9ebfa521cec2137cdcbad5a05c1804a63938e5",
  "receipt": {
    "to": null,
    "from": "0x4B994361257d060cF20dab2F13286B16B0019FdE",
    "contractAddress": "0x3A897E01612B4DdC64A3f0907a1013358BEabA63",
    "transactionIndex": 14,
    "gasUsed": "2319275",
    "logsBloom": "0x
    "blockHash": "0xcaa15657d1d82d957c95b358d4a92c0735e967c04b4f9df8e8de74b555e2203c",
    "transactionHash": "0x441e73cdb0647cd3bf0cd8598b9ebfa521cec2137cdcbad5a05c1804a63938e5",
    "logs": [
      {
        "transactionIndex": 14,
        "blockNumber": 11049296,
        "transactionHash": "0x441e73cdb0647cd3bf0cd8598b9ebfa521cec2137cdcbad5a05c1804a63938e5",
        "address": "0x3A897E01612B4DdC64A3f0907a1013358BEabA63",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000004b994361257d060cf20dab2f13286b16b0019fde"
        ],
        "data": "0x",
        "logIndex": 38,
        "blockHash": "0xcaa15657d1d82d957c95b358d4a92c0735e967c04b4f9df8e8de74b555e2203c"
      }
    ],
    "blockNumber": 11049296,
    "cumulativeGasUsed": "3974954",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x4520D4Ef13C93Cd64381Df10e1c07a2cDf61324C",
    "0xE592427A0AEce92De3Edee1F18E0157C05861564",
    "0x3D699d799905da251f89c6ed01d73B5d9d7242cF",
    "0xc778417E063141139Fce010982780140Aa0cD5Ab"
  ],
  "numDeployments": 2,
  "solcInputHash": "9f6456bf474cf37c406afd1d93b73f97",
  "metadata": "{\"compiler\":{\"version\":\"0.8.11+commit.d7f03943\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract NftBond\",\"name\":\"nft_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"router_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"usdc_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"weth_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AlreadyBorrowed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Borrow_DepositNotEnded\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Deposit_Ended\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Deposit_ExceededTotalAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Deposit_NotDivisibleByDecimals\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Deposit_NotStarted\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InitProject_InvalidTargetAmountInput\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InitProject_InvalidTimestampInput\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotExistingProject\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Repay_AlreadyDepositted\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Repay_DepositNotEnded\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Repay_NotEnoughAmountInput\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Withdraw_NotRepayedProject\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Controller_NewProject\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Repaid\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"projectId\",\"type\":\"uint256\"}],\"name\":\"borrow\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"projectId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"targetAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"depositStartTs\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"depositEndTs\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unit\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"}],\"name\":\"initProject\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nft\",\"outputs\":[{\"internalType\":\"contract NftBond\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"projects\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currentAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"depositStartTs\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"depositEndTs\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"finalAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"projectId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"repay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"name\":\"swapExactOutputSingle\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdc\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"weth\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"projectId\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"borrow(uint256)\":{\"params\":{\"projectId\":\"id of the project\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"repay(uint256,uint256)\":{\"params\":{\"amount\":\"the amount of USDC the owner wants to transfer to this contract.\",\"projectId\":\"id of the project\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"borrow(uint256)\":{\"notice\":\"The owner withdraws all deposited USDC.\"},\"initProject(uint256,uint256,uint256,uint256,string)\":{\"notice\":\"projectId starts from 0.\"},\"repay(uint256,uint256)\":{\"notice\":\"The owner transfers USDC for depositors to withdraw.\"},\"swapExactOutputSingle(uint256)\":{\"notice\":\"swaps a minimum possible amount of WETH for a fixed amount of USDC.         This contract receives the output USDC to use later operations.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Controller.sol\":\"Controller\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC1155/ERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC1155.sol\\\";\\nimport \\\"./IERC1155Receiver.sol\\\";\\nimport \\\"./extensions/IERC1155MetadataURI.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the basic standard multi-token.\\n * See https://eips.ethereum.org/EIPS/eip-1155\\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\\n *\\n * _Available since v3.1._\\n */\\ncontract ERC1155 is Context, ERC165, IERC1155, IERC1155MetadataURI {\\n    using Address for address;\\n\\n    // Mapping from token ID to account balances\\n    mapping(uint256 => mapping(address => uint256)) private _balances;\\n\\n    // Mapping from account to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\\n    string private _uri;\\n\\n    /**\\n     * @dev See {_setURI}.\\n     */\\n    constructor(string memory uri_) {\\n        _setURI(uri_);\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC1155).interfaceId ||\\n            interfaceId == type(IERC1155MetadataURI).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155MetadataURI-uri}.\\n     *\\n     * This implementation returns the same URI for *all* token types. It relies\\n     * on the token type ID substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * Clients calling this function must replace the `\\\\{id\\\\}` substring with the\\n     * actual token type ID.\\n     */\\n    function uri(uint256) public view virtual override returns (string memory) {\\n        return _uri;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) public view virtual override returns (uint256) {\\n        require(account != address(0), \\\"ERC1155: address zero is not a valid owner\\\");\\n        return _balances[id][account];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOfBatch}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] memory accounts, uint256[] memory ids)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256[] memory)\\n    {\\n        require(accounts.length == ids.length, \\\"ERC1155: accounts and ids length mismatch\\\");\\n\\n        uint256[] memory batchBalances = new uint256[](accounts.length);\\n\\n        for (uint256 i = 0; i < accounts.length; ++i) {\\n            batchBalances[i] = balanceOf(accounts[i], ids[i]);\\n        }\\n\\n        return batchBalances;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[account][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: caller is not token owner nor approved\\\"\\n        );\\n        _safeTransferFrom(from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeBatchTransferFrom}.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: caller is not token owner nor approved\\\"\\n        );\\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n        _balances[id][to] += amount;\\n\\n        emit TransferSingle(operator, from, to, id, amount);\\n\\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; ++i) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n            _balances[id][to] += amount;\\n        }\\n\\n        emit TransferBatch(operator, from, to, ids, amounts);\\n\\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Sets a new URI for all token types, by relying on the token type ID\\n     * substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * By this mechanism, any occurrence of the `\\\\{id\\\\}` substring in either the\\n     * URI or any of the amounts in the JSON file at said URI will be replaced by\\n     * clients with the token type ID.\\n     *\\n     * For example, the `https://token-cdn-domain/\\\\{id\\\\}.json` URI would be\\n     * interpreted by clients as\\n     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\\n     * for token type ID 0x4cce0.\\n     *\\n     * See {uri}.\\n     *\\n     * Because these URIs cannot be meaningfully represented by the {URI} event,\\n     * this function emits no events.\\n     */\\n    function _setURI(string memory newuri) internal virtual {\\n        _uri = newuri;\\n    }\\n\\n    /**\\n     * @dev Creates `amount` tokens of token type `id`, and assigns them to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _mint(\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _balances[id][to] += amount;\\n        emit TransferSingle(operator, address(0), to, id, amount);\\n\\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _doSafeTransferAcceptanceCheck(operator, address(0), to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _mintBatch(\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            _balances[ids[i]][to] += amounts[i];\\n        }\\n\\n        emit TransferBatch(operator, address(0), to, ids, amounts);\\n\\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, address(0), to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens of token type `id` from `from`\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `from` must have at least `amount` tokens of token type `id`.\\n     */\\n    function _burn(\\n        address from,\\n        uint256 id,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n\\n        emit TransferSingle(operator, from, address(0), id, amount);\\n\\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     */\\n    function _burnBatch(\\n        address from,\\n        uint256[] memory ids,\\n        uint256[] memory amounts\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n        }\\n\\n        emit TransferBatch(operator, from, address(0), ids, amounts);\\n\\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC1155: setting approval status for self\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `ids` and `amounts` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `id` and `amount` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    function _doSafeTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155Received(operator, from, id, amount, data) returns (bytes4 response) {\\n                if (response != IERC1155Receiver.onERC1155Received.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _doSafeBatchTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns (\\n                bytes4 response\\n            ) {\\n                if (response != IERC1155Receiver.onERC1155BatchReceived.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _asSingletonArray(uint256 element) private pure returns (uint256[] memory) {\\n        uint256[] memory array = new uint256[](1);\\n        array[0] = element;\\n\\n        return array;\\n    }\\n}\\n\",\"keccak256\":\"0x447a21c87433c0f11252912313a96f3454629ef88cca7a4eefbb283b3ec409f9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x6392f2cfe3a5ee802227fe7a2dfd47096d881aec89bddd214b35c5b46d3cd941\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\\n     *\\n     * NOTE: To accept the transfer, this must return\\n     * `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     * (i.e. 0xf23a6e61, or its own function selector).\\n     *\\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param id The ID of the token being transferred\\n     * @param value The amount of tokens being transferred\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\\n     * been updated.\\n     *\\n     * NOTE: To accept the transfer(s), this must return\\n     * `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     * (i.e. 0xbc197c81, or its own function selector).\\n     *\\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xeb373f1fdc7b755c6a750123a9b9e3a8a02c1470042fd6505d875000a80bde0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/extensions/ERC1155Supply.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC1155/extensions/ERC1155Supply.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC1155.sol\\\";\\n\\n/**\\n * @dev Extension of ERC1155 that adds tracking of total supply per id.\\n *\\n * Useful for scenarios where Fungible and Non-fungible tokens have to be\\n * clearly identified. Note: While a totalSupply of 1 might mean the\\n * corresponding is an NFT, there is no guarantees that no other token with the\\n * same id are not going to be minted.\\n */\\nabstract contract ERC1155Supply is ERC1155 {\\n    mapping(uint256 => uint256) private _totalSupply;\\n\\n    /**\\n     * @dev Total amount of tokens in with a given id.\\n     */\\n    function totalSupply(uint256 id) public view virtual returns (uint256) {\\n        return _totalSupply[id];\\n    }\\n\\n    /**\\n     * @dev Indicates whether any token exist with a given id, or not.\\n     */\\n    function exists(uint256 id) public view virtual returns (bool) {\\n        return ERC1155Supply.totalSupply(id) > 0;\\n    }\\n\\n    /**\\n     * @dev See {ERC1155-_beforeTokenTransfer}.\\n     */\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        if (from == address(0)) {\\n            for (uint256 i = 0; i < ids.length; ++i) {\\n                _totalSupply[ids[i]] += amounts[i];\\n            }\\n        }\\n\\n        if (to == address(0)) {\\n            for (uint256 i = 0; i < ids.length; ++i) {\\n                uint256 id = ids[i];\\n                uint256 amount = amounts[i];\\n                uint256 supply = _totalSupply[id];\\n                require(supply >= amount, \\\"ERC1155: burn amount exceeds totalSupply\\\");\\n                unchecked {\\n                    _totalSupply[id] = supply - amount;\\n                }\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe3deb5f3b0c9d12944f62ab680f041bbf1910d9d3ac6b545b4b8e399643c538d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/extensions/IERC1155MetadataURI.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155.sol\\\";\\n\\n/**\\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155MetadataURI is IERC1155 {\\n    /**\\n     * @dev Returns the URI for token type `id`.\\n     *\\n     * If the `\\\\{id\\\\}` substring is present in the URI, it must be replaced by\\n     * clients with the actual token type ID.\\n     */\\n    function uri(uint256 id) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xa66d18b9a85458d28fc3304717964502ae36f7f8a2ff35bc83f6f85d74b03574\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd6153ce99bcdcce22b124f755e72553295be6abcd63804cfdffceb188b8bef10\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf0018c2440fbe238dd3a8732fa8e17a0f9dce84d31451dc8a32f6d62b349c9f1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Callback for IUniswapV3PoolActions#swap\\n/// @notice Any contract that calls IUniswapV3PoolActions#swap must implement this interface\\ninterface IUniswapV3SwapCallback {\\n    /// @notice Called to `msg.sender` after executing a swap via IUniswapV3Pool#swap.\\n    /// @dev In the implementation you must pay the pool tokens owed for the swap.\\n    /// The caller of this method must be checked to be a UniswapV3Pool deployed by the canonical UniswapV3Factory.\\n    /// amount0Delta and amount1Delta can both be 0 if no tokens were swapped.\\n    /// @param amount0Delta The amount of token0 that was sent (negative) or must be received (positive) by the pool by\\n    /// the end of the swap. If positive, the callback must send that amount of token0 to the pool.\\n    /// @param amount1Delta The amount of token1 that was sent (negative) or must be received (positive) by the pool by\\n    /// the end of the swap. If positive, the callback must send that amount of token1 to the pool.\\n    /// @param data Any data passed through by the caller via the IUniswapV3PoolActions#swap call\\n    function uniswapV3SwapCallback(\\n        int256 amount0Delta,\\n        int256 amount1Delta,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x3f485fb1a44e8fbeadefb5da07d66edab3cfe809f0ac4074b1e54e3eb3c4cf69\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-periphery/contracts/interfaces/IPeripheryPayments.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.7.5;\\n\\n/// @title Periphery Payments\\n/// @notice Functions to ease deposits and withdrawals of ETH\\ninterface IPeripheryPayments {\\n    /// @notice Unwraps the contract's WETH9 balance and sends it to recipient as ETH.\\n    /// @dev The amountMinimum parameter prevents malicious contracts from stealing WETH9 from users.\\n    /// @param amountMinimum The minimum amount of WETH9 to unwrap\\n    /// @param recipient The address receiving ETH\\n    function unwrapWETH9(uint256 amountMinimum, address recipient) external payable;\\n\\n    /// @notice Refunds any ETH balance held by this contract to the `msg.sender`\\n    /// @dev Useful for bundling with mint or increase liquidity that uses ether, or exact output swaps\\n    /// that use ether for the input amount\\n    function refundETH() external payable;\\n\\n    /// @notice Transfers the full amount of a token held by this contract to recipient\\n    /// @dev The amountMinimum parameter prevents malicious contracts from stealing the token from users\\n    /// @param token The contract address of the token which will be transferred to `recipient`\\n    /// @param amountMinimum The minimum amount of token required for a transfer\\n    /// @param recipient The destination address of the token\\n    function sweepToken(\\n        address token,\\n        uint256 amountMinimum,\\n        address recipient\\n    ) external payable;\\n}\\n\",\"keccak256\":\"0xb547e10f1e69bed03621a62b73a503e260643066c6b4054867a4d1fef47eb274\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.7.5;\\npragma abicoder v2;\\n\\nimport '@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol';\\n\\n/// @title Router token swapping functionality\\n/// @notice Functions for swapping tokens via Uniswap V3\\ninterface ISwapRouter is IUniswapV3SwapCallback {\\n    struct ExactInputSingleParams {\\n        address tokenIn;\\n        address tokenOut;\\n        uint24 fee;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountIn;\\n        uint256 amountOutMinimum;\\n        uint160 sqrtPriceLimitX96;\\n    }\\n\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another token\\n    /// @param params The parameters necessary for the swap, encoded as `ExactInputSingleParams` in calldata\\n    /// @return amountOut The amount of the received token\\n    function exactInputSingle(ExactInputSingleParams calldata params) external payable returns (uint256 amountOut);\\n\\n    struct ExactInputParams {\\n        bytes path;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountIn;\\n        uint256 amountOutMinimum;\\n    }\\n\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another along the specified path\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactInputParams` in calldata\\n    /// @return amountOut The amount of the received token\\n    function exactInput(ExactInputParams calldata params) external payable returns (uint256 amountOut);\\n\\n    struct ExactOutputSingleParams {\\n        address tokenIn;\\n        address tokenOut;\\n        uint24 fee;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountOut;\\n        uint256 amountInMaximum;\\n        uint160 sqrtPriceLimitX96;\\n    }\\n\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another token\\n    /// @param params The parameters necessary for the swap, encoded as `ExactOutputSingleParams` in calldata\\n    /// @return amountIn The amount of the input token\\n    function exactOutputSingle(ExactOutputSingleParams calldata params) external payable returns (uint256 amountIn);\\n\\n    struct ExactOutputParams {\\n        bytes path;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountOut;\\n        uint256 amountInMaximum;\\n    }\\n\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another along the specified path (reversed)\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactOutputParams` in calldata\\n    /// @return amountIn The amount of the input token\\n    function exactOutput(ExactOutputParams calldata params) external payable returns (uint256 amountIn);\\n}\\n\",\"keccak256\":\"0x9bfaf1feb32814623e627ab70f2409760b15d95f1f9b058e2b3399a8bb732975\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.6.0;\\n\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\n\\nlibrary TransferHelper {\\n    /// @notice Transfers tokens from the targeted address to the given destination\\n    /// @notice Errors with 'STF' if transfer fails\\n    /// @param token The contract address of the token to be transferred\\n    /// @param from The originating address from which the tokens will be transferred\\n    /// @param to The destination address of the transfer\\n    /// @param value The amount to be transferred\\n    function safeTransferFrom(\\n        address token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        (bool success, bytes memory data) =\\n            token.call(abi.encodeWithSelector(IERC20.transferFrom.selector, from, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'STF');\\n    }\\n\\n    /// @notice Transfers tokens from msg.sender to a recipient\\n    /// @dev Errors with ST if transfer fails\\n    /// @param token The contract address of the token which will be transferred\\n    /// @param to The recipient of the transfer\\n    /// @param value The value of the transfer\\n    function safeTransfer(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(IERC20.transfer.selector, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'ST');\\n    }\\n\\n    /// @notice Approves the stipulated contract to spend the given allowance in the given token\\n    /// @dev Errors with 'SA' if transfer fails\\n    /// @param token The contract address of the token to be approved\\n    /// @param to The target of the approval\\n    /// @param value The amount of the given token the target will be allowed to spend\\n    function safeApprove(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(IERC20.approve.selector, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'SA');\\n    }\\n\\n    /// @notice Transfers ETH to the recipient address\\n    /// @dev Fails with `STE`\\n    /// @param to The destination of the transfer\\n    /// @param value The value to be transferred\\n    function safeTransferETH(address to, uint256 value) internal {\\n        (bool success, ) = to.call{value: value}(new bytes(0));\\n        require(success, 'STE');\\n    }\\n}\\n\",\"keccak256\":\"0x9af98b0908c96320ca6d08b22f0efca864742f6adbe5794cafe2d1d2e808b0cd\",\"license\":\"GPL-2.0-or-later\"},\"contracts/Controller.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.11;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"./NftBond.sol\\\";\\nimport \\\"./SwapHelper.sol\\\";\\n\\nerror InitProject_InvalidTimestampInput();\\nerror InitProject_InvalidTargetAmountInput();\\nerror Deposit_NotStarted();\\nerror Deposit_Ended();\\nerror Deposit_ExceededTotalAmount();\\nerror Deposit_NotDivisibleByDecimals();\\nerror Withdraw_NotRepayedProject();\\nerror Repay_NotEnoughAmountInput();\\nerror Repay_AlreadyDepositted();\\nerror NotExistingProject();\\nerror Borrow_DepositNotEnded();\\nerror Repay_DepositNotEnded();\\nerror AlreadyBorrowed();\\n\\ninterface IController {\\n    /**\\n     * @notice A user deposits ETH or USDC and buys a NFT.\\n     * @param projectId id of the project the user wants to invest.\\n     * @param depositAmount the amount of USDC user wants to deposit.\\n     */\\n    function deposit(uint256 projectId, uint256 depositAmount) external payable;\\n\\n    /**\\n     * @notice A user burns his/her NFT and receives USDC with accrued interests.\\n     * @param tokenId id of the NFT the user wants to burn.\\n     */\\n    function withdraw(uint256 tokenId) external;\\n\\n    /**\\n     * @notice The owner withdraws all deposited USDC.\\n     * @param projectId id of the project\\n     */\\n    function borrow(uint256 projectId) external;\\n\\n    /**\\n     * @notice The owner transfers USDC for depositors to withdraw.\\n     * @param projectId id of the project\\n     * @param amount the amount of USDC the owner wants to transfer to this contract.\\n     */\\n    function repay(uint256 projectId, uint256 amount) external;\\n}\\n\\ncontract Controller is Ownable, SwapHelper, IController {\\n    /**\\n     * totalAmount: target amount (Before Borrow) & total deposited (After Project Ended). Changes with borrow.\\n     * currentAmount: balance of this project. Changes with deposit, withdraw, borrow, and repay.\\n     * finalAmount: repaid amount after interest. Changes with repay.\\n     */\\n    struct Project {\\n        uint256 totalAmount;\\n        uint256 currentAmount;\\n        uint256 depositStartTs;\\n        uint256 depositEndTs;\\n        uint256 finalAmount;\\n    }\\n\\n    NftBond public nft;\\n\\n    mapping(uint256 => Project) public projects;\\n\\n    event Controller_NewProject();\\n    event Repaid();\\n\\n    constructor(\\n        NftBond nft_,\\n        address router_,\\n        address usdc_,\\n        address weth_\\n    ) SwapHelper(router_, usdc_, weth_) {\\n        nft = nft_;\\n    }\\n\\n    /**\\n     * @notice projectId starts from 0.\\n     */\\n    function initProject(\\n        uint256 targetAmount,\\n        uint256 depositStartTs,\\n        uint256 depositEndTs,\\n        uint256 unit,\\n        string memory uri\\n    ) external onlyOwner {\\n        if (depositEndTs <= block.timestamp || depositEndTs <= depositStartTs)\\n            revert InitProject_InvalidTimestampInput();\\n        if (targetAmount == 0) revert InitProject_InvalidTargetAmountInput();\\n\\n        Project memory newProject = Project({\\n            totalAmount: targetAmount,\\n            currentAmount: 0,\\n            depositStartTs: depositStartTs,\\n            depositEndTs: depositEndTs,\\n            finalAmount: 0\\n        });\\n\\n        uint256 projectId = nft.tokenIdCounter();\\n        projects[projectId] = newProject;\\n\\n        nft.initProject(uri, unit);\\n        emit Controller_NewProject();\\n    }\\n\\n    function deposit(uint256 projectId, uint256 amount)\\n        external\\n        payable\\n        override\\n    {\\n        // check\\n        Project storage project = projects[projectId];\\n        if (project.depositStartTs == 0) revert NotExistingProject();\\n        if (block.timestamp < project.depositStartTs)\\n            revert Deposit_NotStarted();\\n        if (project.depositEndTs <= block.timestamp) revert Deposit_Ended();\\n        if (project.currentAmount + amount > project.totalAmount)\\n            revert Deposit_ExceededTotalAmount();\\n        if (amount % (10**decimal) != 0)\\n            revert Deposit_NotDivisibleByDecimals();\\n\\n        // effect\\n        projects[projectId].currentAmount += amount;\\n\\n        // interaction\\n        if (msg.value != 0) {\\n            swapExactOutputSingle(amount);\\n        } else {\\n            TransferHelper.safeTransferFrom(\\n                usdc,\\n                msg.sender,\\n                address(this),\\n                amount\\n            );\\n        }\\n\\n        uint256 principal = _calculatePrincipal(amount);\\n        nft.createLoan(projectId, principal, msg.sender);\\n    }\\n\\n    function borrow(uint256 projectId) external onlyOwner {\\n        // check\\n        Project storage project = projects[projectId];\\n        if (project.depositStartTs == 0) revert NotExistingProject();\\n        if (block.timestamp < project.depositEndTs)\\n            revert Borrow_DepositNotEnded();\\n        if (project.currentAmount == 0) revert AlreadyBorrowed();\\n\\n        // effect\\n        project.totalAmount = project.currentAmount;\\n        uint256 amount = project.currentAmount;\\n        project.currentAmount = 0;\\n\\n        // interaction\\n        IERC20(usdc).transfer(msg.sender, amount);\\n    }\\n\\n    function repay(uint256 projectId, uint256 amount)\\n        external\\n        override\\n        onlyOwner\\n    {\\n        Project storage project = projects[projectId];\\n        // check\\n        if (project.finalAmount != 0) revert Repay_AlreadyDepositted();\\n        if (project.depositStartTs == 0) revert NotExistingProject();\\n        if (amount < project.totalAmount) revert Repay_NotEnoughAmountInput();\\n        if (project.depositEndTs > block.timestamp)\\n            revert Repay_DepositNotEnded();\\n\\n        // effect\\n        project.finalAmount = project.currentAmount = amount;\\n\\n        // interaction\\n        IERC20(usdc).transferFrom(msg.sender, address(this), amount);\\n\\n        emit Repaid();\\n    }\\n\\n    function withdraw(uint256 projectId) external override {\\n        Project storage project = projects[projectId];\\n        if (project.depositStartTs == 0) revert NotExistingProject();\\n        if (project.finalAmount == 0) revert Withdraw_NotRepayedProject();\\n\\n        uint256 userTokenBalance = nft.balanceOf(msg.sender, projectId);\\n        uint256 userDollarBalance = _calculateDollarBalance(\\n            projectId,\\n            userTokenBalance\\n        );\\n\\n        // effect\\n        project.currentAmount -= userDollarBalance;\\n\\n        // interaction\\n        // Multiply first to prevent decimal from going down to 0.\\n        uint256 interest = (project.finalAmount * userDollarBalance) /\\n            project.totalAmount;\\n        TransferHelper.safeTransfer(usdc, msg.sender, interest);\\n\\n        nft.redeem(projectId, msg.sender, userTokenBalance);\\n    }\\n\\n    function _calculatePrincipal(uint256 amount)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        return amount / (10**decimal);\\n    }\\n\\n    function _calculateDollarBalance(uint256 projectId, uint256 balance)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        uint256 unit = nft.unit(projectId);\\n\\n        return balance * unit * (10**decimal);\\n    }\\n}\\n\",\"keccak256\":\"0xad34ca0ad68892e1f77430a2c426e7acb1b71791886c9b427a085a41c1cbcf21\",\"license\":\"MIT\"},\"contracts/NftBond.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.11;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC1155/extensions/ERC1155Supply.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\n\\nerror AlreadyInitialized();\\nerror OnlyController();\\nerror NotExistingToken();\\nerror NotDivisibleByUnit();\\nerror ZeroBalance();\\n\\n// tokenId is projectId\\ncontract NftBond is ERC1155Supply, Ownable {\\n    event InitProject();\\n    event CreateLoan();\\n    event Redeem();\\n\\n    // stores how much one unit worths. We use USDC, so if a unit is $10, it is 10.\\n    mapping(uint256 => uint256) private _unit;\\n    mapping(uint256 => string) private _uri;\\n\\n    address public controller;\\n    uint256 public tokenIdCounter;\\n\\n    constructor() ERC1155(\\\"\\\") {}\\n\\n    function unit(uint256 tokenId) public view returns (uint256) {\\n        return _unit[tokenId];\\n    }\\n\\n    function init(address controller_) public onlyOwner {\\n        if (controller != address(0)) revert AlreadyInitialized();\\n\\n        controller = controller_;\\n    }\\n\\n    function initProject(string memory uri_, uint256 unit_)\\n        external\\n        onlyController\\n    {\\n        uint256 tokenId = tokenIdCounter;\\n        _setUri(tokenId, uri_);\\n        _setUnit(tokenId, unit_);\\n        _tokenIdIncrement();\\n\\n        // TODO: Add event args\\n        emit InitProject();\\n    }\\n\\n    function uri(uint256 tokenId) public view override returns (string memory) {\\n        return _uri[tokenId];\\n    }\\n\\n    /**\\n     * @notice Mint tokens corresponding amount to unit value\\n     * @param tokenId id of the project\\n     * @param principal the total value of tokens user want to mint\\n     */\\n    function createLoan(\\n        uint256 tokenId,\\n        uint256 principal,\\n        address account\\n    ) external onlyController {\\n        uint256 unit_ = _unit[tokenId];\\n        if (principal % unit_ != 0) revert NotDivisibleByUnit();\\n\\n        _mint(account, tokenId, principal / unit_, \\\"\\\");\\n\\n        // TODO: Add event args\\n        emit CreateLoan();\\n    }\\n\\n    // amount is necessary for fractional redemption.\\n    function redeem(\\n        uint256 tokenId,\\n        address account,\\n        uint256 tokenBalance\\n    ) external onlyController {\\n        if (balanceOf(account, tokenId) == 0) revert ZeroBalance();\\n\\n        _burn(account, tokenId, tokenBalance);\\n\\n        // TODO: Add event args\\n        emit Redeem();\\n    }\\n\\n    function _tokenIdIncrement() internal {\\n        tokenIdCounter++;\\n    }\\n\\n    function _setUri(uint256 tokenId, string memory uri_) private {\\n        require(bytes(_uri[tokenId]).length == 0, \\\"uri is already saved\\\");\\n        _uri[tokenId] = uri_;\\n    }\\n\\n    function _setUnit(uint256 tokenId, uint256 unit_) private {\\n        _unit[tokenId] = unit_;\\n    }\\n\\n    modifier onlyController() {\\n        if (msg.sender != controller) revert OnlyController();\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0x549ac68cd9514a79f45ed98eaad1deffd4595c7919db94eb336781303c3cd2fe\",\"license\":\"MIT\"},\"contracts/SwapHelper.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.11;\\nimport \\\"@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol\\\";\\nimport \\\"@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol\\\";\\nimport \\\"@uniswap/v3-periphery/contracts/interfaces/IPeripheryPayments.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\n\\ninterface ISwapHelper {\\n    function swapExactOutputSingle(uint256 amountOut) external payable;\\n}\\n\\ncontract SwapHelper is ISwapHelper {\\n    address public router;\\n    address public usdc;\\n    address public weth;\\n    uint256 public decimal;\\n\\n    constructor(\\n        address router_,\\n        address usdc_,\\n        address weth_\\n    ) {\\n        router = router_;\\n        usdc = usdc_;\\n        weth = weth_;\\n\\n        decimal = IERC20Metadata(usdc_).decimals();\\n    }\\n\\n    /*\\n    address public constant WETH9 = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\\n    address public constant USDC = 0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48;\\n    // NOTE: Does not work with SwapRouter02\\n    address public constant swapRouter =\\n        0xE592427A0AEce92De3Edee1F18E0157C05861564;\\n    */\\n\\n    /// @notice swaps a minimum possible amount of WETH for a fixed amount of USDC.\\n    ///         This contract receives the output USDC to use later operations.\\n    function swapExactOutputSingle(uint256 amountOut) public payable {\\n        require(amountOut > 0, \\\"Must pass non 0 DAI amount\\\");\\n        require(msg.value > 0, \\\"Must pass non 0 ETH amount\\\");\\n        uint256 amountInMaximum = msg.value;\\n\\n        ISwapRouter.ExactOutputSingleParams memory params = ISwapRouter\\n            .ExactOutputSingleParams({\\n                tokenIn: weth,\\n                tokenOut: usdc,\\n                fee: 500, // pool fee to 0.05%.\\n                recipient: address(this),\\n                deadline: block.timestamp,\\n                amountOut: amountOut,\\n                amountInMaximum: amountInMaximum,\\n                sqrtPriceLimitX96: 0\\n            });\\n\\n        ISwapRouter(router).exactOutputSingle{value: msg.value}(params);\\n        IPeripheryPayments(router).refundETH();\\n\\n        // refund leftover ETH to user\\n        (bool success, ) = msg.sender.call{value: address(this).balance}(\\\"\\\");\\n        require(success, \\\"refund failed\\\");\\n    }\\n\\n    receive() external payable {}\\n}\\n\",\"keccak256\":\"0xde46652bfac81198ae2be8422284ee57a2aeb8f08257f31325a531bdf134b06a\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060405162002aad38038062002aad833981810160405281019062000037919062000361565b8282826200005a6200004e620001e660201b60201c565b620001ee60201b60201c565b82600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa15801562000169573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200018f919062000411565b60ff1660048190555050505083600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050505062000443565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620002e482620002b7565b9050919050565b6000620002f882620002d7565b9050919050565b6200030a81620002eb565b81146200031657600080fd5b50565b6000815190506200032a81620002ff565b92915050565b6200033b81620002d7565b81146200034757600080fd5b50565b6000815190506200035b8162000330565b92915050565b600080600080608085870312156200037e576200037d620002b2565b5b60006200038e8782880162000319565b9450506020620003a1878288016200034a565b9350506040620003b4878288016200034a565b9250506060620003c7878288016200034a565b91505092959194509250565b600060ff82169050919050565b620003eb81620003d3565b8114620003f757600080fd5b50565b6000815190506200040b81620003e0565b92915050565b6000602082840312156200042a5762000429620002b2565b5b60006200043a84828501620003fa565b91505092915050565b61265a80620004536000396000f3fe6080604052600436106100ec5760003560e01c806376809ce31161008a578063d8aed14511610059578063d8aed145146102be578063e2bbb158146102e7578063f2fde38b14610303578063f887ea401461032c576100f3565b806376809ce314610223578063889ad54c1461024e5780638da5cb5b1461026a578063c5ebeaec14610295576100f3565b80633fc8cef3116100c65780633fc8cef31461018d578063452f8f04146101b857806347ccca02146101e1578063715018a61461020c576100f3565b8063107046bd146100f85780632e1a7d4d146101395780633e413bee14610162576100f3565b366100f357005b600080fd5b34801561010457600080fd5b5061011f600480360381019061011a9190611823565b610357565b60405161013095949392919061185f565b60405180910390f35b34801561014557600080fd5b50610160600480360381019061015b9190611823565b61038d565b005b34801561016e57600080fd5b506101776105d4565b60405161018491906118f3565b60405180910390f35b34801561019957600080fd5b506101a26105fa565b6040516101af91906118f3565b60405180910390f35b3480156101c457600080fd5b506101df60048036038101906101da9190611a54565b610620565b005b3480156101ed57600080fd5b506101f6610878565b6040516102039190611b4a565b60405180910390f35b34801561021857600080fd5b5061022161089e565b005b34801561022f57600080fd5b506102386108b2565b6040516102459190611b65565b60405180910390f35b61026860048036038101906102639190611823565b6108b8565b005b34801561027657600080fd5b5061027f610bf9565b60405161028c91906118f3565b60405180910390f35b3480156102a157600080fd5b506102bc60048036038101906102b79190611823565b610c22565b005b3480156102ca57600080fd5b506102e560048036038101906102e09190611b80565b610dc3565b005b61030160048036038101906102fc9190611b80565b610fbf565b005b34801561030f57600080fd5b5061032a60048036038101906103259190611bec565b611246565b005b34801561033857600080fd5b506103416112ca565b60405161034e91906118f3565b60405180910390f35b60066020528060005260406000206000915090508060000154908060010154908060020154908060030154908060040154905085565b60006006600083815260200190815260200160002090506000816002015414156103e3576040517f8652b88000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600081600401541415610422576040517fd7c09c7c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1662fdd58e33856040518363ffffffff1660e01b8152600401610480929190611c19565b602060405180830381865afa15801561049d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104c19190611c57565b905060006104cf84836112f0565b9050808360010160008282546104e59190611cb3565b92505081905550600083600001548285600401546105039190611ce7565b61050d9190611d70565b905061053c600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1633836113bf565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663d87801618633866040518463ffffffff1660e01b815260040161059b93929190611da1565b600060405180830381600087803b1580156105b557600080fd5b505af11580156105c9573d6000803e3d6000fd5b505050505050505050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b610628611514565b42831115806106375750838311155b1561066e576040517f177392d000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008514156106a9576040517f79959cfe00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006040518060a0016040528087815260200160008152602001868152602001858152602001600081525090506000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166398bdf6f56040518163ffffffff1660e01b8152600401602060405180830381865afa158015610745573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107699190611c57565b905081600660008381526020019081526020016000206000820151816000015560208201518160010155604082015181600201556060820151816003015560808201518160040155905050600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f6c5feb984866040518363ffffffff1660e01b8152600401610811929190611e60565b600060405180830381600087803b15801561082b57600080fd5b505af115801561083f573d6000803e3d6000fd5b505050507fadbfc99647c65b3f5b3e163ba8df3f82b347ca2c041cc3045f778b2630b3f3e660405160405180910390a150505050505050565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6108a6611514565b6108b06000611592565b565b60045481565b600081116108fb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108f290611edc565b60405180910390fd5b6000341161093e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161093590611f48565b60405180910390fd5b60003490506000604051806101000160405280600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016101f462ffffff1681526020013073ffffffffffffffffffffffffffffffffffffffff168152602001428152602001848152602001838152602001600073ffffffffffffffffffffffffffffffffffffffff168152509050600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663db3e219834836040518363ffffffff1660e01b8152600401610a819190612055565b60206040518083038185885af1158015610a9f573d6000803e3d6000fd5b50505050506040513d601f19601f82011682018060405250810190610ac49190611c57565b50600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166312210e8a6040518163ffffffff1660e01b8152600401600060405180830381600087803b158015610b2f57600080fd5b505af1158015610b43573d6000803e3d6000fd5b5050505060003373ffffffffffffffffffffffffffffffffffffffff1647604051610b6d906120a2565b60006040518083038185875af1925050503d8060008114610baa576040519150601f19603f3d011682016040523d82523d6000602084013e610baf565b606091505b5050905080610bf3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bea90612103565b60405180910390fd5b50505050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b610c2a611514565b6000600660008381526020019081526020016000209050600081600201541415610c80576040517f8652b88000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8060030154421015610cbe576040517fd12b230800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600081600101541415610cfd576040517f467f208e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8060010154816000018190555060008160010154905060008260010181905550600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836040518363ffffffff1660e01b8152600401610d7a929190611c19565b6020604051808303816000875af1158015610d99573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dbd919061215b565b50505050565b610dcb611514565b60006006600084815260200190815260200160002090506000816004015414610e20576040517fefe994fa00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600081600201541415610e5f576040517f8652b88000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8060000154821015610e9d576040517f821ca7c200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b4281600301541115610edb576040517f29d003f300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b81816001018190558160040181905550600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330856040518463ffffffff1660e01b8152600401610f4a93929190612188565b6020604051808303816000875af1158015610f69573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f8d919061215b565b507f7e691e0780b47ee6568e2dc33620a707d7c033e6a5bd5e53fde1a2de9fd9e11f60405160405180910390a1505050565b6000600660008481526020019081526020016000209050600081600201541415611015576040517f8652b88000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8060020154421015611053576040517fb13fef1900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b42816003015411611090576040517feaf1d1c500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80600001548282600101546110a591906121bf565b11156110dd576040517fe680a04700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600454600a6110ee9190612348565b836110f99190612393565b14611130576040517f72f51f5100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8160066000858152602001908152602001600020600101600082825461115691906121bf565b92505081905550600034146111735761116e826108b8565b6111a2565b6111a1600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16333085611656565b5b60006111ad836117ae565b9050600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663dc4cab0c8583336040518463ffffffff1660e01b815260040161120e939291906123c4565b600060405180830381600087803b15801561122857600080fd5b505af115801561123c573d6000803e3d6000fd5b5050505050505050565b61124e611514565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156112be576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112b59061246d565b60405180910390fd5b6112c781611592565b50565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600080600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663e00508ba856040518263ffffffff1660e01b815260040161134e9190611b65565b602060405180830381865afa15801561136b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061138f9190611c57565b9050600454600a6113a09190612348565b81846113ac9190611ce7565b6113b69190611ce7565b91505092915050565b6000808473ffffffffffffffffffffffffffffffffffffffff1663a9059cbb60e01b85856040516024016113f4929190611c19565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505060405161145e91906124c9565b6000604051808303816000865af19150503d806000811461149b576040519150601f19603f3d011682016040523d82523d6000602084013e6114a0565b606091505b50915091508180156114ce57506000815114806114cd5750808060200190518101906114cc919061215b565b5b5b61150d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115049061252c565b60405180910390fd5b5050505050565b61151c6117d1565b73ffffffffffffffffffffffffffffffffffffffff1661153a610bf9565b73ffffffffffffffffffffffffffffffffffffffff1614611590576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161158790612598565b60405180910390fd5b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6000808573ffffffffffffffffffffffffffffffffffffffff166323b872dd60e01b86868660405160240161168d93929190612188565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040516116f791906124c9565b6000604051808303816000865af19150503d8060008114611734576040519150601f19603f3d011682016040523d82523d6000602084013e611739565b606091505b50915091508180156117675750600081511480611766575080806020019051810190611765919061215b565b5b5b6117a6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161179d90612604565b60405180910390fd5b505050505050565b6000600454600a6117bf9190612348565b826117ca9190611d70565b9050919050565b600033905090565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b611800816117ed565b811461180b57600080fd5b50565b60008135905061181d816117f7565b92915050565b600060208284031215611839576118386117e3565b5b60006118478482850161180e565b91505092915050565b611859816117ed565b82525050565b600060a0820190506118746000830188611850565b6118816020830187611850565b61188e6040830186611850565b61189b6060830185611850565b6118a86080830184611850565b9695505050505050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006118dd826118b2565b9050919050565b6118ed816118d2565b82525050565b600060208201905061190860008301846118e4565b92915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61196182611918565b810181811067ffffffffffffffff821117156119805761197f611929565b5b80604052505050565b60006119936117d9565b905061199f8282611958565b919050565b600067ffffffffffffffff8211156119bf576119be611929565b5b6119c882611918565b9050602081019050919050565b82818337600083830152505050565b60006119f76119f2846119a4565b611989565b905082815260208101848484011115611a1357611a12611913565b5b611a1e8482856119d5565b509392505050565b600082601f830112611a3b57611a3a61190e565b5b8135611a4b8482602086016119e4565b91505092915050565b600080600080600060a08688031215611a7057611a6f6117e3565b5b6000611a7e8882890161180e565b9550506020611a8f8882890161180e565b9450506040611aa08882890161180e565b9350506060611ab18882890161180e565b925050608086013567ffffffffffffffff811115611ad257611ad16117e8565b5b611ade88828901611a26565b9150509295509295909350565b6000819050919050565b6000611b10611b0b611b06846118b2565b611aeb565b6118b2565b9050919050565b6000611b2282611af5565b9050919050565b6000611b3482611b17565b9050919050565b611b4481611b29565b82525050565b6000602082019050611b5f6000830184611b3b565b92915050565b6000602082019050611b7a6000830184611850565b92915050565b60008060408385031215611b9757611b966117e3565b5b6000611ba58582860161180e565b9250506020611bb68582860161180e565b9150509250929050565b611bc9816118d2565b8114611bd457600080fd5b50565b600081359050611be681611bc0565b92915050565b600060208284031215611c0257611c016117e3565b5b6000611c1084828501611bd7565b91505092915050565b6000604082019050611c2e60008301856118e4565b611c3b6020830184611850565b9392505050565b600081519050611c51816117f7565b92915050565b600060208284031215611c6d57611c6c6117e3565b5b6000611c7b84828501611c42565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000611cbe826117ed565b9150611cc9836117ed565b925082821015611cdc57611cdb611c84565b5b828203905092915050565b6000611cf2826117ed565b9150611cfd836117ed565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615611d3657611d35611c84565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000611d7b826117ed565b9150611d86836117ed565b925082611d9657611d95611d41565b5b828204905092915050565b6000606082019050611db66000830186611850565b611dc360208301856118e4565b611dd06040830184611850565b949350505050565b600081519050919050565b600082825260208201905092915050565b60005b83811015611e12578082015181840152602081019050611df7565b83811115611e21576000848401525b50505050565b6000611e3282611dd8565b611e3c8185611de3565b9350611e4c818560208601611df4565b611e5581611918565b840191505092915050565b60006040820190508181036000830152611e7a8185611e27565b9050611e896020830184611850565b9392505050565b7f4d7573742070617373206e6f6e20302044414920616d6f756e74000000000000600082015250565b6000611ec6601a83611de3565b9150611ed182611e90565b602082019050919050565b60006020820190508181036000830152611ef581611eb9565b9050919050565b7f4d7573742070617373206e6f6e20302045544820616d6f756e74000000000000600082015250565b6000611f32601a83611de3565b9150611f3d82611efc565b602082019050919050565b60006020820190508181036000830152611f6181611f25565b9050919050565b611f71816118d2565b82525050565b600062ffffff82169050919050565b611f8f81611f77565b82525050565b611f9e816117ed565b82525050565b611fad816118b2565b82525050565b61010082016000820151611fca6000850182611f68565b506020820151611fdd6020850182611f68565b506040820151611ff06040850182611f86565b5060608201516120036060850182611f68565b5060808201516120166080850182611f95565b5060a082015161202960a0850182611f95565b5060c082015161203c60c0850182611f95565b5060e082015161204f60e0850182611fa4565b50505050565b60006101008201905061206b6000830184611fb3565b92915050565b600081905092915050565b50565b600061208c600083612071565b91506120978261207c565b600082019050919050565b60006120ad8261207f565b9150819050919050565b7f726566756e64206661696c656400000000000000000000000000000000000000600082015250565b60006120ed600d83611de3565b91506120f8826120b7565b602082019050919050565b6000602082019050818103600083015261211c816120e0565b9050919050565b60008115159050919050565b61213881612123565b811461214357600080fd5b50565b6000815190506121558161212f565b92915050565b600060208284031215612171576121706117e3565b5b600061217f84828501612146565b91505092915050565b600060608201905061219d60008301866118e4565b6121aa60208301856118e4565b6121b76040830184611850565b949350505050565b60006121ca826117ed565b91506121d5836117ed565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561220a57612209611c84565b5b828201905092915050565b60008160011c9050919050565b6000808291508390505b600185111561226c5780860481111561224857612247611c84565b5b60018516156122575780820291505b808102905061226585612215565b945061222c565b94509492505050565b6000826122855760019050612341565b816122935760009050612341565b81600181146122a957600281146122b3576122e2565b6001915050612341565b60ff8411156122c5576122c4611c84565b5b8360020a9150848211156122dc576122db611c84565b5b50612341565b5060208310610133831016604e8410600b84101617156123175782820a90508381111561231257612311611c84565b5b612341565b6123248484846001612222565b9250905081840481111561233b5761233a611c84565b5b81810290505b9392505050565b6000612353826117ed565b915061235e836117ed565b925061238b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8484612275565b905092915050565b600061239e826117ed565b91506123a9836117ed565b9250826123b9576123b8611d41565b5b828206905092915050565b60006060820190506123d96000830186611850565b6123e66020830185611850565b6123f360408301846118e4565b949350505050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000612457602683611de3565b9150612462826123fb565b604082019050919050565b600060208201905081810360008301526124868161244a565b9050919050565b600081519050919050565b60006124a38261248d565b6124ad8185612071565b93506124bd818560208601611df4565b80840191505092915050565b60006124d58284612498565b915081905092915050565b7f5354000000000000000000000000000000000000000000000000000000000000600082015250565b6000612516600283611de3565b9150612521826124e0565b602082019050919050565b6000602082019050818103600083015261254581612509565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000612582602083611de3565b915061258d8261254c565b602082019050919050565b600060208201905081810360008301526125b181612575565b9050919050565b7f5354460000000000000000000000000000000000000000000000000000000000600082015250565b60006125ee600383611de3565b91506125f9826125b8565b602082019050919050565b6000602082019050818103600083015261261d816125e1565b905091905056fea2646970667358221220912a7ee8b4f64d4cc487458553a8920cb44f90e821273b3113e682a2a46d0e0d64736f6c634300080b0033",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "borrow(uint256)": {
        "params": {
          "projectId": "id of the project"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "repay(uint256,uint256)": {
        "params": {
          "amount": "the amount of USDC the owner wants to transfer to this contract.",
          "projectId": "id of the project"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "borrow(uint256)": {
        "notice": "The owner withdraws all deposited USDC."
      },
      "initProject(uint256,uint256,uint256,uint256,string)": {
        "notice": "projectId starts from 0."
      },
      "repay(uint256,uint256)": {
        "notice": "The owner transfers USDC for depositors to withdraw."
      },
      "swapExactOutputSingle(uint256)": {
        "notice": "swaps a minimum possible amount of WETH for a fixed amount of USDC.         This contract receives the output USDC to use later operations."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/Controller.sol:Controller",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 3337,
        "contract": "contracts/Controller.sol:Controller",
        "label": "router",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 3339,
        "contract": "contracts/Controller.sol:Controller",
        "label": "usdc",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 3341,
        "contract": "contracts/Controller.sol:Controller",
        "label": "weth",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 3343,
        "contract": "contracts/Controller.sol:Controller",
        "label": "decimal",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 2591,
        "contract": "contracts/Controller.sol:Controller",
        "label": "nft",
        "offset": 0,
        "slot": "5",
        "type": "t_contract(NftBond)3321"
      },
      {
        "astId": 2596,
        "contract": "contracts/Controller.sol:Controller",
        "label": "projects",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_uint256,t_struct(Project)2588_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(NftBond)3321": {
        "encoding": "inplace",
        "label": "contract NftBond",
        "numberOfBytes": "20"
      },
      "t_mapping(t_uint256,t_struct(Project)2588_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct Controller.Project)",
        "numberOfBytes": "32",
        "value": "t_struct(Project)2588_storage"
      },
      "t_struct(Project)2588_storage": {
        "encoding": "inplace",
        "label": "struct Controller.Project",
        "members": [
          {
            "astId": 2579,
            "contract": "contracts/Controller.sol:Controller",
            "label": "totalAmount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 2581,
            "contract": "contracts/Controller.sol:Controller",
            "label": "currentAmount",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 2583,
            "contract": "contracts/Controller.sol:Controller",
            "label": "depositStartTs",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 2585,
            "contract": "contracts/Controller.sol:Controller",
            "label": "depositEndTs",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 2587,
            "contract": "contracts/Controller.sol:Controller",
            "label": "finalAmount",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}